####################################################
# adjusted residuals
####################################################
covariates_adj = my_list[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
# center covariates
#covariates_adj$Mean_FD=as.vector(scale(covariates_adj$Mean_FD,scale = F))
covariates_adj$SEX=relevel(as.factor(covariates_adj$SEX),ref = "2")
#covariates_adj$AGE_AT_SCAN=as.vector(scale(covariates_adj$AGE_AT_SCAN,scale = F))
#covariates_adj$FIQ=as.vector(scale(covariates_adj$FIQ,scale = F))
#covariates_adj$Propfd02=as.vector(scale(covariates_adj$Propfd02,scale = F))
#covariates_adj$PropRMSD025=as.vector(scale(covariates_adj$PropRMSD025,scale = F))
covariates_adj$HANDEDNESS_LR=relevel(as.factor(covariates_adj$HANDEDNESS_LR),ref = "R")
# calculate adjusted residuals
res_adj = matrix(nrow = 435,ncol=312)
for (i in 1:435) {
covariates_adj$y = Y_harmonized[i,]
my_lm = lm(y ~ DX_GROUP + Mean_FD + Propfd02 + PropRMSD025 + SEX + AGE_AT_SCAN + HANDEDNESS_LR,data = covariates_adj)
res_adj[i,]= my_lm$residuals + my_lm$coefficients[1] + my_lm$coefficients[2]*covariates_adj$DX_GROUP
}
dim(res_adj)
boxplot(Y_harmonized[100,],res_adj[100,])
####################################################
# adjusted residuals
####################################################
covariates_adj = my_list[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
# center covariates
covariates_adj$Mean_FD=as.vector(scale(covariates_adj$Mean_FD,scale = F))
covariates_adj$SEX=relevel(as.factor(covariates_adj$SEX),ref = "2")
covariates_adj$AGE_AT_SCAN=as.vector(scale(covariates_adj$AGE_AT_SCAN,scale = F))
covariates_adj$FIQ=as.vector(scale(covariates_adj$FIQ,scale = F))
covariates_adj$Propfd02=as.vector(scale(covariates_adj$Propfd02,scale = F))
covariates_adj$PropRMSD025=as.vector(scale(covariates_adj$PropRMSD025,scale = F))
covariates_adj$HANDEDNESS_LR=relevel(as.factor(covariates_adj$HANDEDNESS_LR),ref = "R")
# calculate adjusted residuals
res_adj = matrix(nrow = 435,ncol=312)
for (i in 1:435) {
covariates_adj$y = Y_harmonized[i,]
my_lm = lm(y ~ DX_GROUP + Mean_FD + Propfd02 + PropRMSD025 + SEX + AGE_AT_SCAN + HANDEDNESS_LR,data = covariates_adj)
res_adj[i,]= my_lm$residuals + my_lm$coefficients[1] + my_lm$coefficients[2]*covariates_adj$DX_GROUP
}
dim(res_adj)
save(res_adj,file = "../Results/adjusted_residuals_sparseICA.RData")
boxplot(Y_harmonized[100,],res_adj[100,])
boxplot(Y_harmonized[158,],res_adj[158,])
View(covariates_adj)
library(corrplot)
library(ppcor)
# Bonferroni
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,2]
res_adj_ASD = res_adj[,which(my_list$DX_GROUP==1)]
res_adj_TD = res_adj[,which(my_list$DX_GROUP==2)]
z_stat = matrix(nrow = 435,ncol = 3)
for (i in 1:435) {
asd = res_adj_ASD[i,]
td = res_adj_TD[i,]
diff = mean(asd) - mean(td)
diff_se = sqrt(var(asd)/length(asd)+var(td)/length(td))
z = diff/diff_se
z_p = 2*pnorm(abs(z),lower.tail = F)
z_stat[i,]=c(z,z_p,NA)
}
hist(z_stat[,1])
hist(z_stat[,2])
# FDR control
z_stat[,3] = p.adjust(z_stat[,2],method = "BH")
length(which(z_stat[,2]<0.05/435))
length(which(z_stat[,3]<0.2))
length(which(z_stat[,3]<0.05))
save(z_stat,res_adj_ASD,res_adj_TD,res_adj,file = "../Results/naive_z_stat_sparseICA.RData")
library(corrplot)
library(ppcor)
# Bonferroni
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,2]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
# FDR=0.2
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,3]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.2)
# clean data
dat_used = my_list[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
dat_used$delta = 1
448-14
dat_used[,14:448] = t(res_adj)
load("../Data/abide_pheno.RData")
# 396-312 = 84 unused data
dat_unused = abide[-which(abide$SUB_ID%in%dat_used$SUB_ID),]
# 396-312 = 84 unused data
dat_unused = abide_pheno[-which(abide$SUB_ID%in%dat_used$SUB_ID),]
# 396-312 = 84 unused data
dat_unused = abide_pheno[-which(abide_pheno$SUB_ID%in%dat_used$SUB_ID),]
dat_unused = dat_unused[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
dat_unused$delta = 0
dat_unused[,14:448]=NA
dat_all = rbind(dat_used,dat_unused)
save(dat_all,dat_unused,dat_used, file = "../Data/dat_for_deconfound_sparseICA.RData")
.libPaths()
getOption("mc.cores")
#library(drtmle)
library(SuperLearner)
load("../Data/dat_for_deconfound_sparseICA.RData")
gn.variables=c("delta","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR",
"DX_GROUP","Stimulant","NonStimulant","ADOS_combine")
# extract design matrix for outcome model fitting
temp.data = dat_all[gn.variables]
gn.xmat = data.frame(model.matrix(delta~.,data=temp.data))[,-1]
View(gn.xmat)
View(dat_all)
# fit with super learner
my.SL.libs.gn = c("SL.earth","SL.glmnet","SL.gam","SL.glm","SL.ranger","SL.step","SL.step.interaction","SL.xgboost","SL.mean")
gn.est=SuperLearner(Y = dat_all$delta, X = gn.xmat, family=binomial(),SL.library = my.SL.libs.gn, cvControl = list(V = 10), method='method.NNLS')
summary(gn.est)
gn.est
gn.est.predict = predict(gn.est, newdata = gn.xmat)$pred
range(gn.est.predict)
summary(rocit(score=gn.est.predict,class=dat_all$delta,method='nonparametric'))
# library(future.apply)
# library(xgboost)
# library(ranger)
# library(visdat)
# library(ggplot2)
# library(gridExtra)
# #library(tidyr)
# library(e1071)
# library(glmnet)
# library(readxl)
library(ROCit)
summary(rocit(score=gn.est.predict,class=dat_all$delta,method='nonparametric'))
?SL.svm
Qn.variables=c("delta","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR",
"DX_GROUP","Stimulant","NonStimulant","ADOS_combine")
# extract design matrix for outcome model fitting
temp.data = dat_used[Qn.variables]
Qn.xmat.fit = data.frame(model.matrix(delta~.,data=temp.data))[,-1]
# design matrix for outcome prediction
temp.data = dat_all[Qn.variables]
Qn.xmat.predict = data.frame(model.matrix(delta~.,data=temp.data))[,-1]
# design matrix for outcome prediction
temp.data = dat_all[Qn.variables]
Qn.xmat = data.frame(model.matrix(delta~.,data=temp.data))[,-1]
# Separate ASD and TD datasets are necessary to obtain the DRTMLE estimates:
temp.data = Qn.xmat[Qn.xmat.predict$DX_GROUP==1,]
Qn.xmat.asd = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data)[,-1])
temp.data = Qn.xmat[Qn.xmat.predict$DX_GROUP==2,]
Qn.xmat.td = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
View(Qn.xmat.td)
View(Qn.xmat)
Qn.xmat = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
View(Qn.xmat)
my.SL.libs.Qbar= c("SL.earth","SL.glmnet","SL.gam","SL.glm","SL.ranger","SL.ridge","SL.step","SL.step.interaction","SL.svm","SL.xgboost","SL.mean")
table(dat_all$DX_GROUP)
# extract design matrix for outcome model fitting
temp.data = dat_used[Qn.variables]
Qn.xmat.fit = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
?SuperLearner
# fit outcome model for each edge
Qbar.SL.asd_mat = matrix(nrow = 435,ncol = 144)
Qbar.SL.td_mat = matrix(nrow = 435,ncol = 252)
i=1
outcome.SL = SuperLearner(Y = dat_used[,13+i],X=Qn.xmat.fit,family=gaussian(), SL.library = my.SL.libs.Qbar,
cvControl = list(V = 10), method = method.CC_LS)
View(Qn.xmat.fit)
Qn.variables=c("SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR",
"DX_GROUP","Stimulant","NonStimulant","ADOS_combine")
# extract design matrix for outcome model fitting
temp.data = dat_used[Qn.variables]
Qn.xmat.fit = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
View(Qn.xmat.fit)
View(Qn.xmat.fit)
# design matrix for outcome prediction
temp.data = dat_all[Qn.variables]
Qn.xmat = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
# Separate ASD and TD datasets are necessary to obtain the DRTMLE estimates:
temp.data = Qn.xmat[Qn.xmat.predict$DX_GROUP==1,]
Qn.xmat.asd = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data)[,-1])
temp.data = Qn.xmat[Qn.xmat.predict$DX_GROUP==2,]
Qn.xmat.td = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
my.SL.libs.Qbar= c("SL.earth","SL.glmnet","SL.gam","SL.glm","SL.ranger","SL.ridge","SL.step","SL.step.interaction","SL.svm","SL.xgboost","SL.mean")
# fit outcome model for each edge
Qbar.SL.asd_mat = matrix(nrow = 435,ncol = 144)
Qbar.SL.td_mat = matrix(nrow = 435,ncol = 252)
i=1
outcome.SL = SuperLearner(Y = dat_used[,13+i],X=Qn.xmat.fit,family=gaussian(), SL.library = my.SL.libs.Qbar,
cvControl = list(V = 10), method = method.CC_LS)
predict(outcome.SL, newdata = Qn.xmat.asd)$pred
predict(outcome.SL, newdata = Qn.xmat.td)$pred
table(dat_all$DX_GROUP)
rm(list = ls())
save.input.data = FALSE
options(mc.cores=1)
seed = 1
# .libPaths('/home/zwan873/R/x86_64-redhat-linux-gnu-library/4.1')
.libPaths()
#library(drtmle)
library(SuperLearner)
# library(future.apply)
# library(xgboost)
# library(ranger)
# library(visdat)
# library(ggplot2)
# library(gridExtra)
# #library(tidyr)
# library(e1071)
# library(glmnet)
# library(readxl)
library(ROCit)
load("/home/zwan873/Real-Data/Data/dat_for_deconfound_sparseICA.RData")
load("../Data/dat_for_deconfound_sparseICA.RData")
gn.variables=c("delta","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR",
"DX_GROUP","Stimulant","NonStimulant","ADOS_combine")
# extract design matrix for outcome model fitting
temp.data = dat_all[gn.variables]
gn.xmat = data.frame(model.matrix(delta~.,data=temp.data))[,-1]
# fit with super learner
my.SL.libs.gn = c("SL.earth","SL.glmnet","SL.gam","SL.glm","SL.ranger","SL.step","SL.step.interaction","SL.xgboost","SL.mean")
gn.est=SuperLearner(Y = dat_all$delta, X = gn.xmat, family=binomial(),SL.library = my.SL.libs.gn, cvControl = list(V = 10), method='method.NNLS')
gn.est.predict = predict(gn.est, newdata = gn.xmat)$pred
summary(rocit(score=gn.est.predict,class=dat_all$delta,method='nonparametric'))
Qn.variables=c("SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR",
"DX_GROUP","Stimulant","NonStimulant","ADOS_combine")
# extract design matrix for outcome model fitting
temp.data = dat_used[Qn.variables]
Qn.xmat.fit = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
# design matrix for outcome prediction
temp.data = dat_all[Qn.variables]
Qn.xmat = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
# Separate ASD and TD datasets are necessary to obtain the DRTMLE estimates:
temp.data = Qn.xmat[Qn.xmat$DX_GROUP==1,]
Qn.xmat.asd = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data)[,-1])
temp.data = Qn.xmat[Qn.xmat$DX_GROUP==2,]
Qn.xmat.td = data.frame(model.matrix(numeric(nrow(temp.data))~.,data=temp.data))[,-1]
my.SL.libs.Qbar= c("SL.earth","SL.glmnet","SL.gam","SL.glm","SL.ranger","SL.ridge","SL.step",
"SL.step.interaction","SL.svm","SL.xgboost","SL.mean")
# fit outcome model for each edge
Qbar.SL.asd_mat = matrix(nrow = 435,ncol = 144)
Qbar.SL.td_mat = matrix(nrow = 435,ncol = 252)
i=1
outcome.SL = SuperLearner(Y = dat_used[,13+i],X=Qn.xmat.fit,family=gaussian(), SL.library = my.SL.libs.Qbar,
cvControl = list(V = 10), method = method.CC_LS)
Qbar.SL.asd_mat[i,] = predict(outcome.SL, newdata = Qn.xmat.asd)$pred
Qbar.SL.td_mat[i,] = predict(outcome.SL, newdata = Qn.xmat.td)$pred
i=10
outcome.SL = SuperLearner(Y = dat_used[,13+i],X=Qn.xmat.fit,family=gaussian(), SL.library = my.SL.libs.Qbar,
cvControl = list(V = 10), method = method.CC_LS)
?SL.mean_ALL
outcome.SL
subj_list = read.csv("../Data/ICA_subjlist_usable.csv")
source("00_utils.R")
load("../Results/group_fastICA.RData")
rm(list = ls())
load("../Data/abide_pheno.RData")
my_list2 = read.csv("../Data/ICA_subjlist_usable.csv")
table(my_list2$DX_GROUP)
my_list = abide_pheno[which(abide_pheno$SUB_ID%in%my_list2$SUB_ID),]
table(my_list$DX_GROUP)
my_list$SITE_ID[which(my_list$SITE_ID=="ABIDEII-KKI_1")] = "ABIDEII-KKI"
View(my_list)
range(my_list$ADOS_combine)
View(my_list)
write.csv(my_list,file = "../Data/abide_396.csv")
View(my_list)
View(abide_pheno)
View(my_list2)
View(abide_pheno)
table(abide_pheno$Usable)
View(abide_pheno)
View(my_list)
table(abide_pheno$Delta_ciric)
write.csv(my_list,file = "../Data/abide_312.csv")
rm(list = ls())
load("../Data/abide_pheno.RData")
my_list2 = read.csv("../Data/ICA_subjlist_usable.csv")
table(my_list2$DX_GROUP)
my_list = abide_pheno[which(abide_pheno$SUB_ID%in%my_list2$SUB_ID),]
table(my_list$DX_GROUP)
my_list$SITE_ID[which(my_list$SITE_ID=="ABIDEII-KKI_1")] = "ABIDEII-KKI"
# create functional connectivity matrix
cor_all=array(dim = c(30,30,312))
for (i in 1:dim(my_list)[1]) {
load(paste0("../Data/est_M_fastICA/",my_list$SITE_ID[i],"/",my_list$SUB_ID[i],"_estM_subPC85.RData"))
my_cor = cor(t(my_M))
cor_all[,,i]=my_cor
cat(my_list$SITE_ID[i],", ",my_list$SUB_ID[i]," finished!\n")
}
# create functional connectivity matrix
cor_all=array(dim = c(30,30,312))
for (i in 1:dim(my_list)[1]) {
load(paste0("../Data/est_M_fastICA/",my_list$SITE_ID[i],"/",my_list$SUB_ID[i],"_estM_subPC85.RData"))
my_cor = cor(t(my_M))
cor_all[,,i]=my_cor
cat(my_list$SITE_ID[i],", ",my_list$SUB_ID[i]," finished!\n")
}
library(neuroCombat)
# receiving coil and slice thickness
receiving_coil = my_list$RECEIVING_COIL
slice_thickness = ifelse(my_list$SITE_ID %in% c("ABIDEI-NYU", "ABIDEII-NYU_1"), 4, 3)
# batch
batch = numeric(312)
batch[grepl("KKI", my_list$SITE_ID)] = ifelse(receiving_coil[grepl("KKI", my_list$SITE_ID)] == "8 channel", 1, 2)
batch[grepl("NYU", my_list$SITE_ID)] = ifelse(slice_thickness[grepl("NYU", my_list$SITE_ID)] == 4, 3, 4)
# # create a corresponding column
my_list$site_feature = NA
my_list$site_feature[batch == 1] = "KKI-8 channel"
my_list$site_feature[batch == 2] = "KKI-32 channel"
my_list$site_feature[batch == 3] = "NYU-4 thickness"
table(my_list$site_feature)
#####################
# create dat by z-transforming cor mat
Y = matrix(nrow = 435,ncol = 312)
for (i in 1:312) {
my_cor = cor_all[,,i]
#Y[,i] = FisherZ(my_cor[lower.tri(my_cor)])
Y[,i] = atanh(my_cor[lower.tri(my_cor)])
}
# mod
# the Np. 157 subject has missing FIQ, impute by nearby values
sum(is.na(my_list$FIQ))
my_list$FIQ[157]
my_list$FIQ[157]=124
mod = model.matrix(~ my_list$DX_GROUP + my_list$Mean_FD + my_list$AGE_AT_SCAN + my_list$SEX + my_list$HANDEDNESS_LR +
my_list$Stimulant + my_list$NonStimulant + my_list$ADOS_combine + my_list$FIQ + my_list$Propfd02 + my_list$PropRMSD025)
# harmonization with parametric adjustment
# parametric priors are used in the EB estimation
data.harmonized = neuroCombat(dat = Y, batch = batch, mod = mod)
# results
Y_harmonized = data.harmonized$dat.combat
# save result
save(Y_harmonized, file = "../Data/Y_harmonized_fastICA.RData")
####################################################
# adjusted residuals
####################################################
covariates_adj = my_list[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
# center covariates
covariates_adj$Mean_FD=as.vector(scale(covariates_adj$Mean_FD,scale = F))
covariates_adj$SEX=relevel(as.factor(covariates_adj$SEX),ref = "2")
covariates_adj$AGE_AT_SCAN=as.vector(scale(covariates_adj$AGE_AT_SCAN,scale = F))
covariates_adj$FIQ=as.vector(scale(covariates_adj$FIQ,scale = F))
covariates_adj$Propfd02=as.vector(scale(covariates_adj$Propfd02,scale = F))
covariates_adj$PropRMSD025=as.vector(scale(covariates_adj$PropRMSD025,scale = F))
covariates_adj$HANDEDNESS_LR=relevel(as.factor(covariates_adj$HANDEDNESS_LR),ref = "R")
# calculate adjusted residuals
res_adj = matrix(nrow = 435,ncol=312)
for (i in 1:435) {
covariates_adj$y = Y_harmonized[i,]
my_lm = lm(y ~ DX_GROUP + Mean_FD + Propfd02 + PropRMSD025 + SEX + AGE_AT_SCAN + HANDEDNESS_LR,data = covariates_adj)
res_adj[i,]= my_lm$residuals + my_lm$coefficients[1] + my_lm$coefficients[2]*covariates_adj$DX_GROUP
}
dim(res_adj)
save(res_adj,file = "../Results/adjusted_residuals_fastICA.RData")
View(my_list)
res_adj_ASD = res_adj[,which(my_list$DX_GROUP==1)]
res_adj_TD = res_adj[,which(my_list$DX_GROUP==2)]
z_stat = matrix(nrow = 435,ncol = 3)
for (i in 1:435) {
asd = res_adj_ASD[i,]
td = res_adj_TD[i,]
diff = mean(asd) - mean(td)
diff_se = sqrt(var(asd)/length(asd)+var(td)/length(td))
z = diff/diff_se
z_p = 2*pnorm(abs(z),lower.tail = F)
z_stat[i,]=c(z,z_p,NA)
}
hist(z_stat[,1])
hist(z_stat[,2])
# FDR control
z_stat[,3] = p.adjust(z_stat[,2],method = "BH")
length(which(z_stat[,2]<0.05/435))
length(which(z_stat[,3]<0.2))
length(which(z_stat[,3]<0.05))
save(z_stat,res_adj_ASD,res_adj_TD,res_adj,file = "../Results/naive_z_stat_fastICA.RData")
library(corrplot)
library(ppcor)
# Bonferroni
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,2]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
# FDR=0.2
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,3]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.2)
# clean data
dat_used = my_list[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
dat_used$delta = 1
dat_used[,14:448] = t(res_adj)
load("../Data/abide_pheno.RData")
# 396-312 = 84 unused data
dat_unused = abide_pheno[-which(abide_pheno$SUB_ID%in%dat_used$SUB_ID),]
dat_unused = dat_unused[,c("SUB_ID","Mean_FD","Propfd02","PropRMSD025","SEX","AGE_AT_SCAN","FIQ","HANDEDNESS_LR","DX_GROUP",
"Stimulant","NonStimulant","ADOS_combine")]
dat_unused$delta = 0
dat_unused[,14:448]=NA
dat_all = rbind(dat_used,dat_unused)
save(dat_all,dat_unused,dat_used, file = "../Data/dat_for_deconfound_fastICA.RData")
# Bonferroni
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,2]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
rm(list = ls())
library(SparseICA)
library(steadyICA)
library(fastICA)
library(irlba)
library(ciftiTools)
ciftiTools.setOption('wb_path', '/Applications/workbench')
load("../Results/group_sparseICA.RData")
cifti_image=read_cifti("../Data/cifti_template.dtseries.nii",brainstructures = "all")
cifti_image$data$cortex_left=my_sparseICA_all$estS_sign[1:29696,]
cifti_image$data$cortex_right=my_sparseICA_all$estS_sign[29697:59412,]
cifti_image$data$subcort=matrix(0,nrow = 31870,ncol = 30)
write_cifti(cifti_image,"../Results/group_sparseICA")
load("../Results/group_fastICA.RData")
cifti_image=read_cifti("../Data/cifti_template.dtseries.nii",brainstructures = "all")
cifti_image$data$cortex_left=my_fastICA$estS_sign[1:29696,]
cifti_image$data$cortex_right=my_fastICA$estS_sign[29697:59412,]
cifti_image$data$subcort=matrix(0,nrow = 31870,ncol = 30)
write_cifti(cifti_image,"../Results/group_fastICA")
