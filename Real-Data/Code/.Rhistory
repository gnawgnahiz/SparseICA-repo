new_exam1 = 68/max(dat$exam1)
new_exam2 = 75/max(dat$exam2)
## feature scaling
dat$exam1 = dat$exam1/max(dat$exam1)
dat$exam2 = dat$exam2/max(dat$exam2)
dat$admission = factor(dat$admission)
ggplot() +
geom_point(data= dat, aes(x = exam1, y = exam2, group = admission, color = admission))+
geom_abline(intercept = -current_theta0/current_theta2,slope = -current_theta1/current_theta2,size=1,color="blue",alpha=0.8)
ggplot() +
geom_point(data= dat, aes(x = exam1, y = exam2, group = admission, color = admission))+
geom_abline(intercept = -current_theta0/current_theta2,slope = -current_theta1/current_theta2,size=1,color="blue",alpha=0.8)+
geom_point(aes(x=new_exam1,y=new_exam2),size=6,shape=17,
color="green",alpha=0.9)
inv.logit(current_theta0 + current_theta1*new_exam1 + current_theta2*new_exam2)
library(ica)
?icafast
install.packages("sigmoid")
library(sigmoid)
sigmoid(-30)
sigmoid(-10)
sigmoid(10)
load("Desktop/abide_Y_9p_all_419.Rda")
table(abide$SITE_ID)
3.823263159257167-3.2638100251809306
4.2541025146589035-3.467928674136957
library(ica)
?icafast
library(steadyICA)
?infomaxICA
library(fastICA)
?fastICA
library(SuperLearner)
?SuperLearner
?p.adjust
install.packages("Matching")
library(Matching)
data(lalonde)
View(lalonde)
install.packages("causaldata")
library(causaldata)
dat=cps_mixtape
View(dat)
library(causaldata)
cps_mixtape
dat=cps_mixtape
View(dat)
table(dat$data_id)
install.packages("tmle")
install.packages("ipw")
?ipw
115+770.84+26.99+32.67+32.7+17.48+17.48
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Desktop/SparseICAtest_0.1.0.tgz", repos = NULL, type = .Platform$pkgType)
library(SparseICAtest)
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICAtest)
?sparseICA_R
?sparseICA_Rcpp
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICAtest)
?matchICA
data(example)
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
lobstr::mem_used()
install.packages("lobstr")
lobstr::mem_used()
library(SparseICAtest)
lobstr::mem_used()
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICAtest)
?sparseICA_R
?BIC_sparseICA_R
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICAtest)
?BIC_sparseICA_R
library(SparseICAtest)
?BIC_sparseICA_R
data(example_sim123)
select_sparseICA = BIC_sparseICA_R(xData = xmat, n.comp = 3,U.list=NULL,whiten = "eigenvec", restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6,maxit.laplace = 500, BIC_plot = T,show_message=F,nu_list = seq(0.1,4,0.1))
my_nu = select_sparseICA$best_nu
?sparseICA_R
my_sparseICA = sparseICA_R(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,whiten = "eigenvec", orth.method = "svd",
restarts.pbyd = 40, lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, show_message=T)
a=matchICA(my_sparseICA$estS,smat)
?matchICA
install.packages("~/Desktop/SparseICAtest_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICAtest)
?sparseICA_R
data(example_sim123)
my_sparseICA = sparseICA_R(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,whiten = "eigenvec", orth.method = "svd",
restarts.pbyd = 40, lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, show_message=T)
a=matchICA(my_sparseICA$estS,smat)
par(mfrow=c(1,3))
image(matrix(a[,1],33,33))
image(matrix(a[,2],33,33))
image(matrix(a[,3],33,33))
par(mfrow=c(1,1))
?sparseICA_Rcpp
?BIC_sparseICA_R
?BIC_sparseICA_Rcpp
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("badger")
15*7
install.packages("oro.dicom")
rm(list = ls())
library(oro.dicom)
t1w_nav = readDICOM("Desktop/anat-t1w_Nav_4/")
t1w_nav = readDICOM("Desktop/anat-t1w_Nav_4")
t1w_nav = readDICOMFile("Desktop/anat-t1w_Nav_4/00002.dcm")
View(t1w_nav)
image(t1w_nav$img)
image(t1w_nav$img[,,15])
image(t1w_nav$img[,,15], col=grey(0:64/64), axes=FALSE, xlab="", ylab="")
image(t1w_nav$img[,,20], col=grey(0:64/64), axes=FALSE, xlab="", ylab="")
image(t1w_nav$img[,15,], col=grey(0:64/64), axes=FALSE, xlab="", ylab="")
t1w = readDICOMFile("Desktop/anat-t1w_6/00001.dcm")
t1w_nav = readDICOMFile("Desktop/anat-t1w_Nav_4/00001.dcm")
image(t1w$img[,15,], col=grey(0:64/64), axes=FALSE, xlab="", ylab="")
image(t1w$img[,150,], col=grey(0:64/64), axes=FALSE, xlab="", ylab="")
t1w_nav2 = readDICOMFile("Desktop/anat-t1w_Nav_5/00001.dcm")
320*300*208
install.packages("spls")
?spls
data(yeast)
library(spls)
data(yeast)
View(yeast)
library(irlba)
irlba
install.packages("fMRItools")
library(fMRItools)
?PCA
U <- matrix(rnorm(900), nrow=300, ncol=3)
V <- matrix(rnorm(15), nrow=3, ncol=5)
PCA(U %*% V)
install.packages("pesel")
?pesel
U <- matrix(rnorm(900), nrow=300, ncol=3)
V <- matrix(rnorm(15), nrow=3, ncol=5)
PCA(U %*% V)
library(pesel)
?`pesel-package`
PCA
?PCA
pesel(U%*%V)
a=pesel(U%*%V)
a$prior
a$nPCs
a = c(157,89.8,104,141,13,101,92,63,105,97,126,184,136,106)
mean(a)
392/4
(430.55+448.42)/5
176+98
100-17*0.5
100-0.5*7
100-13*0.5
100-0.5*5
100-23*0.5
100-5*0.5
100-23/0.5
100-23*0.5
100-7*0.5
install.packages("~/Library/CloudStorage/OneDrive-EmoryUniversity/Research/Sparse_ICA/SparseICA_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICA)
?sparseICA
data(example_sim123)
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
whiten = "eigenvec", orth.method = "svd", method="R",restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, show_message=TRUE)
a=matchICA(my_sparseICA$estS,smat)
par(mfrow=c(1,3))
image(matrix(a[,1],33,33))
image(matrix(a[,2],33,33))
image(matrix(a[,3],33,33))
par(mfrow=c(1,1))
?BIC_sparseICA
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
+                          whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
+                          whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
+                          whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, show_message=TRUE)
library(fastICA)
b=fastICA(xmat,3)
?fastICA
b=fastICA(xmat,3,verbose = T)
library(fastICA)
S <- matrix(runif(10000), 5000, 2)
A <- matrix(c(1, 1, -1, 3), 2, 2, byrow = TRUE)
X <- S %*% A
a <- fastICA(X, 2, alg.typ = "parallel", fun = "logcosh", alpha = 1,
method = "C", row.norm = FALSE, maxit = 200,
tol = 0.0001, verbose = TRUE)
install.packages("~/Library/CloudStorage/OneDrive-EmoryUniversity/Research/Sparse_ICA/SparseICA_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICA)
?sparseICA
data(example_sim123)
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, verbose=TRUE)
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
whiten = "eigenvec", orth.method = "svd", method="R",restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, verbose=TRUE)
install.packages("~/Library/CloudStorage/OneDrive-EmoryUniversity/Research/Sparse_ICA/SparseICA_0.1.0.tar.gz", repos = NULL, type = "source")
library(SparseICA)
?sparseICA
?sparseICA
library(SparseICA)
?sparseICA
data(example_sim123)
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
whiten = "eigenvec", orth.method = "svd", method="C",restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, verbose=TRUE)
my_sparseICA = sparseICA(xData = xmat, n.comp = 3, nu = 1.2, U.list=NULL,
whiten = "eigenvec", orth.method = "svd", method="R",restarts.pbyd = 40,
lambda = sqrt(2)/2, eps = 1e-6, maxit.laplace = 500, verbose=TRUE)
similarity_scores=c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17)
groups=list[[12,4,11,3,6],
groups=list([12,4,11,3,6],
groups=list(c(12,4,11,3,6), c(2,16,12,7,9), c(8,1,7,5,11))
solution <- function(similarity_scores, groups, k) {
solution <- function(similarity_scores, groups, k) {
my_scores = numeric(length(groups))
for(i in 1:length(groups)){
temp_scores = similarity_scores[groups[[i]]]
temp_scores = sort(temp_scores,decreasing = TRUE)[1:k]
my_scores[i] = sum(temp_scores)
}
highest_ind = which.max(my_scores)
return(highest_ind)
}
solution(similarity_scores,groups,k)
}
solution <- function(similarity_scores, groups, k) {
my_scores = numeric(length(groups))
for(i in 1:length(groups)){
temp_scores = similarity_scores[groups[[i]]]
temp_scores = sort(temp_scores,decreasing = TRUE)[1:k]
my_scores[i] = sum(temp_scores)
}
highest_ind = which.max(my_scores)
return(highest_ind)
}
solution(similarity_scores,groups,k)
k=3
solution(similarity_scores,groups,k)
k=2
solution <- function(similarity_scores, groups, k) {
my_scores = numeric(length(groups))
for(i in 1:length(groups)){
temp_scores = similarity_scores[groups[[i]]]
temp_scores = sort(temp_scores,decreasing = TRUE)[1:k]
my_scores[i] = sum(temp_scores)
}
highest_ind = which.max(my_scores)
return(highest_ind)
}
solution(similarity_scores,groups,k)
my_scores = numeric(length(groups))
for(i in 1:length(groups)){
temp_scores = similarity_scores[groups[[i]]]
temp_scores = sort(temp_scores,decreasing = TRUE)[1:k]
my_scores[i] = sum(temp_scores)
}
i=1
similarity_scores[groups[[i]]]
temp_scores = similarity_scores[groups[[i]]]
sort(temp_scores,decreasing = TRUE)
sort(temp_scores,decreasing = TRUE)[1:k]
28.5+28.5+119.14+20+25+49+703.16+24.52+6.25+23+70+40
1137/5
28.5+28.5+119.14+3.26+20+12.85
28.5+28.5+119.14+3.26+20+12.85+49.18+24.52+703.16+6.25+23+70
1088.36/5
363+92
28.5+28.5+119.14+3.26+20+12.85+49.18+703.16+23+70
1057/5
30/4
363+92-219
# Install released version from CRAN
install.packages("pkgdown")
usethis::use_pkgdown()
load("Desktop/dat_for_deconfound.RData.RData")
range(dat_all$ADOS_combine)
load("Desktop/sparseICA_results.RData")
my_sparseICA_all = my_sparseICA_all1
save(my_sparseICA_all,file="Desktop/group_sparseICA.RData")
load("Desktop/fastICA_results.RData")
my_fastICA = my_fastICA2
save(my_fastICA,file="Desktop/group_fastICA.RData")
setwd("~/Desktop/Real-Data/Code")
# Set the path of the directory where the files are located
folder_path <- "../Data/deconfound_sparseICA/AIPWE/"
# Generate the list of expected file names
expected_files <- paste0("AIPWE_ASD_TD_z_stat_", 1:400, ".RData")
# List all files in the folder
actual_files <- list.files(folder_path)
# Find missing files
missing_files <- setdiff(expected_files, actual_files)
# Print missing files
print(missing_files)
###################################################################
# calculate mean AIPWE
###################################################################
load("../Data/deconfound_sparseICA/AIPWE/AIPWE_ASD_TD_z_stat_1.RData")
z_aiptw_stat_mean = z_aiptw_stat
View(z_aiptw_stat_mean)
# add p-value
z_aiptw = matrix(nrow = 435,ncol = 3)
z_aiptw[,1]=z_aiptw_stat_mean[,5]
z_aiptw[,2]=2*pnorm(abs(z_aiptw_stat_mean),lower.tail = F)
z_aiptw[,2]=2*pnorm(abs(z_aiptw_stat_mean[,5]),lower.tail = F)
z_aiptw[,3] = p.adjust(z_aiptw[,2],method = "BH")
View(z_aiptw)
View(z_aiptw_stat_mean)
length(which(z_stat[,3]<0.05))
length(which(z_aiptw[,3]<0.05))
###################################################################
# Make figures for AIPWE-adjusted results
###################################################################
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_aiptw[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_aiptw[,3]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust",p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05)
###################################################################
# extract AIPWE results of 400 different seeds
###################################################################
library(corrplot)
library(ppcor)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust",p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05)
which(z_aiptw[,3]<0.05)
z_aiptw[which(z_aiptw[,3]<0.05),]
rm(list = ls())
###################################################################
# extract AIPWE results of 400 different seeds
###################################################################
library(corrplot)
library(ppcor)
# load DRTMLE and AIPTW data
z_drtmle_stat_all = matrix(nrow = 435,ncol = 400)
z_aiptw_stat_all = matrix(nrow = 435,ncol = 400)
for (i in 1:400) {
load(paste0("../Data/deconfound_sparseICA/AIPWE/AIPWE_ASD_TD_z_stat_",i,".RData"))
z_drtmle_stat_all[,i]=z_drtmle_stat[,5]
z_aiptw_stat_all[,i]=z_aiptw_stat[,5]
}
rm(list = ls())
###################################################################
# extract AIPWE results of 400 different seeds
###################################################################
library(corrplot)
library(ppcor)
# load DRTMLE and AIPTW data
z_aiptw_stat_all = matrix(nrow = 435,ncol = 400)
for (i in 1:400) {
load(paste0("../Data/deconfound_sparseICA/AIPWE/AIPWE_ASD_TD_z_stat_",i,".RData"))
z_aiptw_stat_all[,i]=z_aiptw_stat[,5]
}
save(z_aiptw_stat_all,file = "../Data/AIPWE_ASD_TD_z_stat_all.RData")
save(z_aiptw_stat_all,file = "../Results/AIPWE_ASD_TD_z_stat_all.RData")
###################################################################
# make a plot about the relationship between naive and DRTMLE/AIPTW z stat
###################################################################
load("../Results/naive_z_stat_sparseICA.RData")
View(z_stat)
View(z_aiptw_stat_all)
dat_long = data.frame(x=numeric(174000),y1=numeric(174000))
my_x = c()
for (i in 1:435) {
temp_x = rep(z_stat[i,1],400)
my_x = c(my_x,temp_x)
}
dat_long$x=my_x
my_y1 = c()
for (i in 1:435) {
my_y1 = c(my_y1,z_aiptw_stat_all[i,])
}
dat_long$y1=my_y1
plot(dat_long$x,dat_long$y1,xlab = "Naive Z",ylab = "AIPWE Z",main = "AIPWE vs Naive")
abline(a=0,b=1,col="red")
pdf("../Figures/AIPWE_vs_naive_sparseICA.pdf",width = 10, height = 6)
plot(dat_long$x,dat_long$y1,xlab = "Naive Z",ylab = "AIPWE Z",main = "AIPWE vs Naive")
abline(a=0,b=1,col="red")
dev.off()
###################################################################
# calculate mean AIPWE
###################################################################
z_aiptw_stat_mean = apply(z_aiptw_stat_all,1,mean)
# add p-value
z_aiptw = matrix(nrow = 435,ncol = 3)
z_aiptw[,1]=z_aiptw_stat_mean
z_aiptw[,2]=2*pnorm(abs(z_aiptw_stat_mean),lower.tail = F)
z_aiptw[,3] = p.adjust(z_aiptw[,2],method = "BH")
length(which(z_stat[,3]<0.05))
length(which(z_aiptw[,3]<0.05))
cor(z_aiptw[,1],z_stat[,1])
###################################################################
# Make figures for AIPWE-adjusted results
###################################################################
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_aiptw[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_aiptw[,3]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
pdf("../Figures/Supp_Figure24.pdf",width = 7,height = 7)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust",p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05)
dev.off()
which(z_aiptw[,3]<0.05)
z_aiptw[which(z_aiptw[,3]<0.05),]
# naive
# FDR=0.05
full_cor = diag(30)
full_cor[lower.tri(full_cor)] = z_stat[,1]
full_cor[upper.tri(full_cor)] = t(full_cor)[upper.tri(full_cor)]
colnames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
full_cor_p = diag(x=1,30)
full_cor_p[lower.tri(full_cor_p)] = z_stat[,3]
full_cor_p[upper.tri(full_cor_p)] = t(full_cor_p)[upper.tri(full_cor_p)]
colnames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
rownames(full_cor_p)=c("IC1","IC2","IC3","IC4","IC5","IC6","IC7","IC8","IC9","IC10",
"IC11","IC12","IC13","IC14","IC15","IC16","IC17","IC18","IC19","IC20",
"IC21","IC22","IC23","IC24","IC25","IC26","IC27","IC28","IC29","IC30")
pdf("../Figures/Naive_sparseICA.pdf",width = 7,height = 7)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F)
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust",hclust.method = "ward.D")
#corrplot(full_cor,method = "color",tl.col="black",is.corr = F,order = "hclust",p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05/435)
corrplot(full_cor,method = "color",tl.col="black",is.corr = F,p.mat = full_cor_p,insig = "label_sig",sig.level = 0.05)
dev.off()
save(z_stat,z_drtmle,z_aiptw,z_drtmle_stat_all,z_aiptw_stat_all,file = "../Results/deconfounded_results_sparseICA.RData")
save(z_stat,z_aiptw,z_aiptw_stat_all,file = "../Results/deconfounded_results_sparseICA.RData")
# read outcome model
out_asd=res_adj_ASD[118,]
out_td=res_adj_TD[118,]
dat_jitter = data.frame(group = c(rep("ASD",99),rep("TD",213)),z = c(out_asd,out_td))
ggplot(dat_jitter,aes(group,z))+geom_jitter()
library(ggplot2)
ggplot(dat_jitter,aes(group,z))+geom_jitter()
# load AIPWE data
asd_aiptw_all = matrix(nrow = 435,ncol = 400)
td_aiptw_all = matrix(nrow = 435,ncol = 400)
for (i in 1:400) {
load(paste0("../Data/deconfound_sparseICA/AIPWE/AIPWE_ASD_TD_z_stat_",i,".RData"))
asd_aiptw_all[,i]=z_aiptw_stat[,1]
td_aiptw_all[,i]=z_aiptw_stat[,2]
}
dat_jitter = data.frame(group = c(rep("ASD",99),rep("TD",213)),z = c(res_adj_ASD[118,],res_adj_TD[118,]))
pdf("../Figures/IC18_20_Jitter_sparseICA.pdf",width = 4,height = 4)
ggplot(dat_jitter,aes(group,z))+
geom_jitter(color="#666666",width = 0.2) +
labs(x = "Primary Diagnosis", y = "IC18 - IC20") +
geom_point(aes(x="ASD",y=mean(asd_aiptw_all[118,])),colour="red",size=3,shape=15)+
geom_point(aes(x="TD",y=mean(td_aiptw_all[118,])),colour="red",size=3,shape=15)
dev.off()
dat_jitter = data.frame(group = c(rep("ASD",99),rep("TD",213)),z = c(res_adj_ASD[359,],res_adj_TD[359,]))
pdf("../Figures/IC5_13_Jitter_sparseICA.pdf",width = 4,height = 4)
ggplot(dat_jitter,aes(group,z))+
geom_jitter(color="#666666",width = 0.2) +
labs(x = "Primary Diagnosis", y = "IC5 - IC13") +
geom_point(aes(x="ASD",y=mean(asd_aiptw_all[359,])),colour="red",size=3,shape=15)+
geom_point(aes(x="TD",y=mean(td_aiptw_all[359,])),colour="red",size=3,shape=15)
dev.off()
